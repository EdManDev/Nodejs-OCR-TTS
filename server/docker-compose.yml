services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ocr-tts-postgres
    environment:
      POSTGRES_DB: ocr_tts_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ocr-tts-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for job queues
  redis:
    image: redis:7-alpine
    container_name: ocr-tts-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ocr-tts-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js OCR TTS Server
  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ocr-tts-server
    environment:
      # Server Configuration
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0

      # Database Configuration
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ocr_tts_db

      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # Security
      JWT_SECRET: your-super-secret-jwt-key-change-in-production

      # File Upload Configuration
      MAX_FILE_SIZE: 100MB
      UPLOAD_PATH: ./uploads
      TEMP_PATH: ./temp
      STORAGE_TYPE: local

      # OCR Configuration
      TESSERACT_LANG: eng
      OCR_DPI: 300

      # Text Processing Configuration
      MAX_WORDS_PER_CHUNK: 1000
      OVERLAP_WORDS: 50

      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100

      # Logging
      LOG_LEVEL: info
      LOG_FILE_PATH: ./logs

      # Processing Configuration
      MAX_CONCURRENT_JOBS: 5
      JOB_TIMEOUT_MS: 300000
      CLEANUP_INTERVAL_HOURS: 24

      # CORS Configuration
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173
    ports:
      - "3000:3000"
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - ./logs:/app/logs
    networks:
      - ocr-tts-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ocr-tts-network:
    driver: bridge
