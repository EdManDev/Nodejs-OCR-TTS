{
  "info": {
    "name": "Node.js OCR TTS Backend API",
    "description": "Complete API collection for testing the PDF OCR and TTS backend application",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "documentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "jobId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Document Management",
      "item": [
        {
          "name": "Upload PDF Document",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.documentId) {",
                  "        pm.collectionVariables.set('documentId', response.data.documentId);",
                  "    }",
                  "    if (response.data && response.data.jobId) {",
                  "        pm.collectionVariables.set('jobId', response.data.jobId);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data",
                "disabled": true
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "PDF file to upload"
                },
                {
                  "key": "ocrLanguage",
                  "value": "eng",
                  "type": "text",
                  "description": "OCR language code (optional)"
                },
                {
                  "key": "priority",
                  "value": "normal",
                  "type": "text",
                  "description": "Processing priority: low, normal, high"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/documents/upload",
              "host": ["{{baseUrl}}"],
              "path": ["api", "documents", "upload"]
            },
            "description": "Upload a PDF document for OCR processing. The file will be validated, stored, and queued for processing."
          }
        },
        {
          "name": "Get Document Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/documents/{{documentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "documents", "{{documentId}}"]
            },
            "description": "Retrieve detailed information about a specific document including processing status, metadata, and extracted text."
          }
        },
        {
          "name": "List Documents",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/documents?page=1&limit=10&status=completed&sortBy=uploadedAt&sortOrder=desc",
              "host": ["{{baseUrl}}"],
              "path": ["api", "documents"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of documents per page"
                },
                {
                  "key": "status",
                  "value": "completed",
                  "description": "Filter by processing status"
                },
                {
                  "key": "sortBy",
                  "value": "uploadedAt",
                  "description": "Sort field"
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "Sort order: asc or desc"
                }
              ]
            },
            "description": "Get a paginated list of all documents with optional filtering and sorting."
          }
        },
        {
          "name": "Get Document Text Chunks",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/documents/{{documentId}}/chunks?page=1&limit=50",
              "host": ["{{baseUrl}}"],
              "path": ["api", "documents", "{{documentId}}", "chunks"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "50",
                  "description": "Number of chunks per page"
                }
              ]
            },
            "description": "Retrieve the text chunks for a document, ready for TTS processing."
          }
        },
        {
          "name": "Download Original PDF",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/pdf"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/documents/{{documentId}}/download",
              "host": ["{{baseUrl}}"],
              "path": ["api", "documents", "{{documentId}}", "download"]
            },
            "description": "Download the original PDF file that was uploaded."
          }
        },
        {
          "name": "Delete Document",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/documents/{{documentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "documents", "{{documentId}}"]
            },
            "description": "Delete a document and all associated data including files, text chunks, and processing jobs."
          }
        }
      ],
      "description": "Endpoints for managing PDF documents, including upload, retrieval, and deletion operations."
    },
    {
      "name": "Processing Jobs",
      "item": [
        {
          "name": "Get Job Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/jobs/{{jobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "jobs", "{{jobId}}"]
            },
            "description": "Get the current status and progress of a specific processing job."
          }
        },
        {
          "name": "List Jobs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/jobs?status=active&type=text_extraction&page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["api", "jobs"],
              "query": [
                {
                  "key": "status",
                  "value": "active",
                  "description": "Filter by job status"
                },
                {
                  "key": "type",
                  "value": "text_extraction",
                  "description": "Filter by job type"
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of jobs per page"
                }
              ]
            },
            "description": "Get a list of processing jobs with optional filtering by status and type."
          }
        },
        {
          "name": "Cancel Job",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"User requested cancellation\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/jobs/{{jobId}}/cancel",
              "host": ["{{baseUrl}}"],
              "path": ["api", "jobs", "{{jobId}}", "cancel"]
            },
            "description": "Cancel a pending or active processing job."
          }
        },
        {
          "name": "Retry Failed Job",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"priority\": \"high\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/jobs/{{jobId}}/retry",
              "host": ["{{baseUrl}}"],
              "path": ["api", "jobs", "{{jobId}}", "retry"]
            },
            "description": "Retry a failed processing job with optional priority adjustment."
          }
        }
      ],
      "description": "Endpoints for monitoring and managing processing jobs in the queue system."
    },
    {
      "name": "System Management",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            },
            "description": "Check the health status of all system components including database, Redis, storage, and memory usage."
          }
        },
        {
          "name": "System Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "stats"]
            },
            "description": "Get comprehensive system statistics including document counts, processing metrics, and performance data."
          }
        },
        {
          "name": "Queue Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/queue/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "queue", "stats"]
            },
            "description": "Get detailed statistics about the job queue including active, waiting, completed, and failed job counts."
          }
        }
      ],
      "description": "System monitoring and statistics endpoints for health checks and performance monitoring."
    },
    {
      "name": "Configuration",
      "item": [
        {
          "name": "Get OCR Languages",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/config/ocr-languages",
              "host": ["{{baseUrl}}"],
              "path": ["api", "config", "ocr-languages"]
            },
            "description": "Get a list of available OCR languages supported by the system."
          }
        },
        {
          "name": "Get System Limits",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/config/limits",
              "host": ["{{baseUrl}}"],
              "path": ["api", "config", "limits"]
            },
            "description": "Get current system limits including file size, page limits, and processing constraints."
          }
        }
      ],
      "description": "Configuration endpoints to retrieve system settings and capabilities."
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Upload Invalid File Type",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Upload a non-PDF file to test validation"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/documents/upload",
              "host": ["{{baseUrl}}"],
              "path": ["api", "documents", "upload"]
            },
            "description": "Test file validation by uploading an invalid file type."
          }
        },
        {
          "name": "Get Non-existent Document",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/documents/invalid-id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "documents", "invalid-id"]
            },
            "description": "Test error handling by requesting a non-existent document."
          }
        },
        {
          "name": "Rate Limiting Test",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            },
            "description": "Make multiple rapid requests to test rate limiting. Run this request multiple times quickly."
          }
        }
      ],
      "description": "Test cases for error scenarios and edge cases to verify proper error handling."
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set request timestamp",
          "pm.globals.set('timestamp', new Date().toISOString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common test assertions",
          "pm.test('Response time is less than 10 seconds', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(10000);",
          "});",
          "",
          "pm.test('Response has proper headers', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Log response for debugging",
          "if (pm.response.code >= 400) {",
          "    console.log('Error Response:', pm.response.text());",
          "}"
        ]
      }
    }
  ]
}
